#pragma kernel CSMain

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _Light;

static const float maxDst = 10;
static const float maxSteps = 80;
static const float epsilon = 0.01f;
static const float shadowBias = epsilon * 50;

struct Shape
{
    float3 position;
    float3 size;
    float3 color;
    int shapeType;
    int operation;
    float blendStrength;
};

struct Ray
{
    float3 origin;
    float3 direction;
};

StructuredBuffer<Shape> shapes;
int shapesNumber;


float SphereSDF(float3 p, float3 centre, float radius)
{
    return distance(p, centre) - radius;
}

float CubeSDF(float3 p, float3 centre, float3 size)
{
    float3 o = abs(p - centre) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float TorusSDF(float3 p, float3 centre, float r1, float r2)
{   
    float2 q = float2(length((p-centre).xz)-r1, p.y-centre.y);
    return length(q)-r2;
}

float PrismSDF(float3 p, float3 centre, float2 h)
{
    float3 q = abs(p-centre);
    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
}

float CylinderSDF(float3 p, float3 centre, float2 h)
{
    float2 d = abs(float2(length((p).xz), p.y)) - h;
    return length(max(d,0.0)) + max(min(d.x,0),min(d. y,0));
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}

float4 Blend(float a, float b, float3 colorA, float3 colorB, float k)
{
    float h = clamp(0.5 + 0.5 * (b-a)/k, 0.0, 1.0);
    float bDst = lerp(b, a, h) - k*h*(1.0-h);
    float3 bCol = lerp(colorB, colorA, h);
    return float4(bCol, bDst);
}

float4 Combine(float dstA, float dstB, float3 colorA, float3 colorB, int operation, float blendStrength)
{
    float dst = dstA;
    float3 color = colorA;

    // Union
    if (operation == 0) {
        // min(a, b)
        if (dstB < dst) {
            dst = dstB;
            color = colorB;
        }
    }
    // Substract
    else if (operation == 1) {
        // max(a,-b)
        if (-dstB > dst) {
            dst = -dstB;
            color = colorB;
        }
    }
    // Intersect
    else if (operation == 2) {
        // max(a,b)
        if (dstB > dst) {
            dst = dstB;
            color = colorB;
        }
    }
    // Blend
    else if (operation == 3) {
        float4 blend = Blend(dstA, dstB, colorA, colorB, blendStrength);
        dst = blend.w;
        color = blend.xyz;
    }

    return float4(color,dst);
}

float GetShapeDst(Shape shape, float3 p)
{
    if (shape.shapeType == 0)
    {
        return SphereSDF(p, shape.position, shape.size.x);
    }
    else if (shape.shapeType == 1)
    {
        return CubeSDF(p, shape.position, shape.size);
    }
    else if (shape.shapeType == 2)
    {
        return TorusSDF(p, shape.position, shape.size.x, shape.size.y);
    }
    else if(shape.shapeType == 3)
    {
        return PrismSDF(p, shape.position, shape.size.xy);
    }
    else if(shape.shapeType == 4)
    {
        return CylinderSDF(p, shape.position, shape.size.xy);
    }

    return maxDst;
}

float4 SceneDst(float3 p)
{
    float globalDst = maxDst;
    float3 globalColor = 1;
    
    for (int i = 0; i < shapesNumber; i ++) {
        Shape shape = shapes[i];

        float localDst = GetShapeDst(shape, p);
        float3 localColor = shape.color;
        
        float4 globalCombined = Combine(globalDst, localDst, globalColor, localColor, shape.operation, shape.blendStrength);
        globalColor = globalCombined.xyz;
        globalDst = globalCombined.w;        
    }

    return float4(globalColor, globalDst);
}

float3 CalculateNormal(float3 p)
{
    float x = SceneDst(float3(p.x+epsilon,p.y,p.z)).w - SceneDst(float3(p.x-epsilon,p.y,p.z)).w;
    float y = SceneDst(float3(p.x,p.y+epsilon,p.z)).w - SceneDst(float3(p.x,p.y-epsilon,p.z)).w;
    float z = SceneDst(float3(p.x,p.y,p.z+epsilon)).w - SceneDst(float3(p.x,p.y,p.z-epsilon)).w;
    return normalize(float3(x,y,z));
}

float CalculateShadow(Ray ray, float dstToShadePoint)
{
    float rayDst = 0;
    int marchSteps = 0;
    float shadowIntensity = 0.2;
    float brightness = 1;

    while (rayDst < dstToShadePoint) {
        marchSteps++;
        float4 sceneDst = SceneDst(ray.origin);
        float dst = sceneDst.w;
        
        if (dst <= epsilon) {
            return shadowIntensity;
        }

        brightness = min(brightness, dst*200);

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
    return shadowIntensity + (1-shadowIntensity) * brightness;
}

void RayMarching(uint3 id, uint width, uint height)
{
    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (marchSteps < maxSteps && rayDst < maxDst)
    {
        marchSteps++;
        float4 sceneDst = SceneDst(ray.origin);
        float dst = sceneDst.w;
        
        if (dst <= epsilon) {
            // Light
            float3 pointOnSurface = ray.origin + ray.direction * dst;
            float3 normal = CalculateNormal(pointOnSurface - ray.direction * epsilon);
            
            float3 lightDir = -_Light;
            float lighting = saturate(saturate(dot(normal,lightDir)));
            float3 col = sceneDst.xyz;
            
            // Shadow
            float3 offsetPos = pointOnSurface + normal * shadowBias;
            float3 dirToLight = -_Light;

            ray.origin = offsetPos;
            ray.direction = dirToLight;

            float dstToLight = maxDst;
            float shadow = CalculateShadow(ray, dstToLight);

            Destination[id.xy] = float4(col * lighting * shadow, 1);

            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);
    Destination[id.xy] = Source[id.xy];

    RayMarching(id, width, height);
}
